//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace Web_Solution.ServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceUser", Namespace="http://schemas.datacontract.org/2004/07/WcfService")]
    public partial class ServiceUser : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string emailField;
        
        private int idField;
        
        private string passwordField;
        
        private int rootFolderIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string email {
            get {
                return this.emailField;
            }
            set {
                if ((object.ReferenceEquals(this.emailField, value) != true)) {
                    this.emailField = value;
                    this.RaisePropertyChanged("email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                if ((object.ReferenceEquals(this.passwordField, value) != true)) {
                    this.passwordField = value;
                    this.RaisePropertyChanged("password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int rootFolderId {
            get {
                return this.rootFolderIdField;
            }
            set {
                if ((this.rootFolderIdField.Equals(value) != true)) {
                    this.rootFolderIdField = value;
                    this.RaisePropertyChanged("rootFolderId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceFolder", Namespace="http://schemas.datacontract.org/2004/07/WcfService")]
    public partial class ServiceFolder : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int idField;
        
        private string nameField;
        
        private System.Nullable<int> parentFolderIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> parentFolderId {
            get {
                return this.parentFolderIdField;
            }
            set {
                if ((this.parentFolderIdField.Equals(value) != true)) {
                    this.parentFolderIdField = value;
                    this.RaisePropertyChanged("parentFolderId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceDocument", Namespace="http://schemas.datacontract.org/2004/07/WcfService")]
    public partial class ServiceDocument : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime creationTimeField;
        
        private int creatorIdField;
        
        private int idField;
        
        private string nameField;
        
        private string pathField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime creationTime {
            get {
                return this.creationTimeField;
            }
            set {
                if ((this.creationTimeField.Equals(value) != true)) {
                    this.creationTimeField = value;
                    this.RaisePropertyChanged("creationTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int creatorId {
            get {
                return this.creatorIdField;
            }
            set {
                if ((this.creatorIdField.Equals(value) != true)) {
                    this.creatorIdField = value;
                    this.RaisePropertyChanged("creatorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string path {
            get {
                return this.pathField;
            }
            set {
                if ((object.ReferenceEquals(this.pathField, value) != true)) {
                    this.pathField = value;
                    this.RaisePropertyChanged("path");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceUserdocument", Namespace="http://schemas.datacontract.org/2004/07/WcfService")]
    public partial class ServiceUserdocument : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int documentIdField;
        
        private int folderIdField;
        
        private int userIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int documentId {
            get {
                return this.documentIdField;
            }
            set {
                if ((this.documentIdField.Equals(value) != true)) {
                    this.documentIdField = value;
                    this.RaisePropertyChanged("documentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int folderId {
            get {
                return this.folderIdField;
            }
            set {
                if ((this.folderIdField.Equals(value) != true)) {
                    this.folderIdField = value;
                    this.RaisePropertyChanged("folderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int userId {
            get {
                return this.userIdField;
            }
            set {
                if ((this.userIdField.Equals(value) != true)) {
                    this.userIdField = value;
                    this.RaisePropertyChanged("userId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceDocumentrevision", Namespace="http://schemas.datacontract.org/2004/07/WcfService")]
    public partial class ServiceDocumentrevision : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime creationTimeField;
        
        private int documentIdField;
        
        private int editorIdField;
        
        private int idField;
        
        private string pathField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime creationTime {
            get {
                return this.creationTimeField;
            }
            set {
                if ((this.creationTimeField.Equals(value) != true)) {
                    this.creationTimeField = value;
                    this.RaisePropertyChanged("creationTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int documentId {
            get {
                return this.documentIdField;
            }
            set {
                if ((this.documentIdField.Equals(value) != true)) {
                    this.documentIdField = value;
                    this.RaisePropertyChanged("documentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int editorId {
            get {
                return this.editorIdField;
            }
            set {
                if ((this.editorIdField.Equals(value) != true)) {
                    this.editorIdField = value;
                    this.RaisePropertyChanged("editorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string path {
            get {
                return this.pathField;
            }
            set {
                if ((object.ReferenceEquals(this.pathField, value) != true)) {
                    this.pathField = value;
                    this.RaisePropertyChanged("path");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/AddUser", ReplyAction="http://tempuri.org/IService1/AddUserResponse")]
        System.IAsyncResult BeginAddUser(string email, string password, System.AsyncCallback callback, object asyncState);
        
        int EndAddUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/AddFolder", ReplyAction="http://tempuri.org/IService1/AddFolderResponse")]
        System.IAsyncResult BeginAddFolder(string name, int parentFolderId, System.AsyncCallback callback, object asyncState);
        
        int EndAddFolder(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/AddDocumentWithUserDocument", ReplyAction="http://tempuri.org/IService1/AddDocumentWithUserDocumentResponse")]
        System.IAsyncResult BeginAddDocumentWithUserDocument(string name, int userId, string filepath, string content, System.AsyncCallback callback, object asyncState);
        
        int EndAddDocumentWithUserDocument(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/AddDocumentRevision", ReplyAction="http://tempuri.org/IService1/AddDocumentRevisionResponse")]
        System.IAsyncResult BeginAddDocumentRevision(int editorId, int documentId, string content, System.AsyncCallback callback, object asyncState);
        
        void EndAddDocumentRevision(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/SaveMergedDocument", ReplyAction="http://tempuri.org/IService1/SaveMergedDocumentResponse")]
        System.IAsyncResult BeginSaveMergedDocument(int editorId, int documentId, string content, System.AsyncCallback callback, object asyncState);
        
        void EndSaveMergedDocument(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetUserByEmailAndPass", ReplyAction="http://tempuri.org/IService1/GetUserByEmailAndPassResponse")]
        System.IAsyncResult BeginGetUserByEmailAndPass(string email, string pass, System.AsyncCallback callback, object asyncState);
        
        Web_Solution.ServiceReference.ServiceUser EndGetUserByEmailAndPass(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetUserById", ReplyAction="http://tempuri.org/IService1/GetUserByIdResponse")]
        System.IAsyncResult BeginGetUserById(int userId, System.AsyncCallback callback, object asyncState);
        
        Web_Solution.ServiceReference.ServiceUser EndGetUserById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetUserByEmail", ReplyAction="http://tempuri.org/IService1/GetUserByEmailResponse")]
        System.IAsyncResult BeginGetUserByEmail(string email, System.AsyncCallback callback, object asyncState);
        
        Web_Solution.ServiceReference.ServiceUser EndGetUserByEmail(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetFolder", ReplyAction="http://tempuri.org/IService1/GetFolderResponse")]
        System.IAsyncResult BeginGetFolder(int folderId, System.AsyncCallback callback, object asyncState);
        
        Web_Solution.ServiceReference.ServiceFolder EndGetFolder(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetRootFolderId", ReplyAction="http://tempuri.org/IService1/GetRootFolderIdResponse")]
        System.IAsyncResult BeginGetRootFolderId(int userId, System.AsyncCallback callback, object asyncState);
        
        int EndGetRootFolderId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetDocumentById", ReplyAction="http://tempuri.org/IService1/GetDocumentByIdResponse")]
        System.IAsyncResult BeginGetDocumentById(int documentId, System.AsyncCallback callback, object asyncState);
        
        Web_Solution.ServiceReference.ServiceDocument EndGetDocumentById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/DeleteFolder", ReplyAction="http://tempuri.org/IService1/DeleteFolderResponse")]
        System.IAsyncResult BeginDeleteFolder(int folderId, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteFolder(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/DeleteDocumentReference", ReplyAction="http://tempuri.org/IService1/DeleteDocumentReferenceResponse")]
        System.IAsyncResult BeginDeleteDocumentReference(int userId, int documentId, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteDocumentReference(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/DeleteDocument", ReplyAction="http://tempuri.org/IService1/DeleteDocumentResponse")]
        System.IAsyncResult BeginDeleteDocument(int documentId, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteDocument(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetAllUserDocumentsByUserId", ReplyAction="http://tempuri.org/IService1/GetAllUserDocumentsByUserIdResponse")]
        System.IAsyncResult BeginGetAllUserDocumentsByUserId(int userId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<Web_Solution.ServiceReference.ServiceUserdocument> EndGetAllUserDocumentsByUserId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetDocumentContent", ReplyAction="http://tempuri.org/IService1/GetDocumentContentResponse")]
        System.IAsyncResult BeginGetDocumentContent(string directoryPath, string filename, System.AsyncCallback callback, object asyncState);
        
        string EndGetDocumentContent(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetLatestDocumentContent", ReplyAction="http://tempuri.org/IService1/GetLatestDocumentContentResponse")]
        System.IAsyncResult BeginGetLatestDocumentContent(int documentId, System.AsyncCallback callback, object asyncState);
        
        string EndGetLatestDocumentContent(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/SyncDocument", ReplyAction="http://tempuri.org/IService1/SyncDocumentResponse")]
        System.IAsyncResult BeginSyncDocument(int editorId, int documentId, string filepath, string fileContent, string title, string pureContent, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<string>> EndSyncDocument(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/SyncDocumentWeb", ReplyAction="http://tempuri.org/IService1/SyncDocumentWebResponse")]
        System.IAsyncResult BeginSyncDocumentWeb(int editorId, int documentId, string filepath, string metadata, string title, string pureContent, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<string>> EndSyncDocumentWeb(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetDocumentId", ReplyAction="http://tempuri.org/IService1/GetDocumentIdResponse")]
        System.IAsyncResult BeginGetDocumentId(int userId, string title, System.AsyncCallback callback, object asyncState);
        
        int EndGetDocumentId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/AddUserDocument", ReplyAction="http://tempuri.org/IService1/AddUserDocumentResponse")]
        System.IAsyncResult BeginAddUserDocument(int userId, int documentId, string filepath, System.AsyncCallback callback, object asyncState);
        
        void EndAddUserDocument(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/FolderExists", ReplyAction="http://tempuri.org/IService1/FolderExistsResponse")]
        System.IAsyncResult BeginFolderExists(int parentFolderId, string name, System.AsyncCallback callback, object asyncState);
        
        int EndFolderExists(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/AddUserDocumentInRoot", ReplyAction="http://tempuri.org/IService1/AddUserDocumentInRootResponse")]
        System.IAsyncResult BeginAddUserDocumentInRoot(int userId, int documentId, System.AsyncCallback callback, object asyncState);
        
        void EndAddUserDocumentInRoot(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetAllDocumentRevisionsByDocumentId", ReplyAction="http://tempuri.org/IService1/GetAllDocumentRevisionsByDocumentIdResponse")]
        System.IAsyncResult BeginGetAllDocumentRevisionsByDocumentId(int documentId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<Web_Solution.ServiceReference.ServiceDocumentrevision> EndGetAllDocumentRevisionsByDocumentId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetAllFilesAndFoldersByUserId", ReplyAction="http://tempuri.org/IService1/GetAllFilesAndFoldersByUserIdResponse")]
        System.IAsyncResult BeginGetAllFilesAndFoldersByUserId(int userId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<string>>> EndGetAllFilesAndFoldersByUserId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetLatestPureDocumentContent", ReplyAction="http://tempuri.org/IService1/GetLatestPureDocumentContentResponse")]
        System.IAsyncResult BeginGetLatestPureDocumentContent(int documentId, System.AsyncCallback callback, object asyncState);
        
        string EndGetLatestPureDocumentContent(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/ShareDocumentWeb", ReplyAction="http://tempuri.org/IService1/ShareDocumentWebResponse")]
        System.IAsyncResult BeginShareDocumentWeb(int documentId, int ownerId, int recieverId, System.AsyncCallback callback, object asyncState);
        
        void EndShareDocumentWeb(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/AddDocumentRevisionWeb", ReplyAction="http://tempuri.org/IService1/AddDocumentRevisionWebResponse")]
        System.IAsyncResult BeginAddDocumentRevisionWeb(int documentId, int userId, string pureContent, string metadata, System.AsyncCallback callback, object asyncState);
        
        void EndAddDocumentRevisionWeb(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/MoveDocumentWeb", ReplyAction="http://tempuri.org/IService1/MoveDocumentWebResponse")]
        System.IAsyncResult BeginMoveDocumentWeb(int userId, int documentId, int newFolderId, System.AsyncCallback callback, object asyncState);
        
        void EndMoveDocumentWeb(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetDocumentRevisionContentById", ReplyAction="http://tempuri.org/IService1/GetDocumentRevisionContentByIdResponse")]
        System.IAsyncResult BeginGetDocumentRevisionContentById(int documentRevisionId, System.AsyncCallback callback, object asyncState);
        
        string EndGetDocumentRevisionContentById(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Web_Solution.ServiceReference.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddDocumentWithUserDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddDocumentWithUserDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserByEmailAndPassCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserByEmailAndPassCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Web_Solution.ServiceReference.ServiceUser Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Web_Solution.ServiceReference.ServiceUser)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Web_Solution.ServiceReference.ServiceUser Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Web_Solution.ServiceReference.ServiceUser)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserByEmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserByEmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Web_Solution.ServiceReference.ServiceUser Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Web_Solution.ServiceReference.ServiceUser)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Web_Solution.ServiceReference.ServiceFolder Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Web_Solution.ServiceReference.ServiceFolder)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRootFolderIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRootFolderIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDocumentByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDocumentByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Web_Solution.ServiceReference.ServiceDocument Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Web_Solution.ServiceReference.ServiceDocument)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllUserDocumentsByUserIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllUserDocumentsByUserIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<Web_Solution.ServiceReference.ServiceUserdocument> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<Web_Solution.ServiceReference.ServiceUserdocument>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDocumentContentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDocumentContentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLatestDocumentContentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLatestDocumentContentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SyncDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SyncDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<string>> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<string>>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SyncDocumentWebCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SyncDocumentWebCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<string>> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<string>>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDocumentIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDocumentIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FolderExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FolderExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllDocumentRevisionsByDocumentIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllDocumentRevisionsByDocumentIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<Web_Solution.ServiceReference.ServiceDocumentrevision> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<Web_Solution.ServiceReference.ServiceDocumentrevision>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAllFilesAndFoldersByUserIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllFilesAndFoldersByUserIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<string>>> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<string>>>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLatestPureDocumentContentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLatestPureDocumentContentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDocumentRevisionContentByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDocumentRevisionContentByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Web_Solution.ServiceReference.IService1>, Web_Solution.ServiceReference.IService1 {
        
        private BeginOperationDelegate onBeginAddUserDelegate;
        
        private EndOperationDelegate onEndAddUserDelegate;
        
        private System.Threading.SendOrPostCallback onAddUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddFolderDelegate;
        
        private EndOperationDelegate onEndAddFolderDelegate;
        
        private System.Threading.SendOrPostCallback onAddFolderCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddDocumentWithUserDocumentDelegate;
        
        private EndOperationDelegate onEndAddDocumentWithUserDocumentDelegate;
        
        private System.Threading.SendOrPostCallback onAddDocumentWithUserDocumentCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddDocumentRevisionDelegate;
        
        private EndOperationDelegate onEndAddDocumentRevisionDelegate;
        
        private System.Threading.SendOrPostCallback onAddDocumentRevisionCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveMergedDocumentDelegate;
        
        private EndOperationDelegate onEndSaveMergedDocumentDelegate;
        
        private System.Threading.SendOrPostCallback onSaveMergedDocumentCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserByEmailAndPassDelegate;
        
        private EndOperationDelegate onEndGetUserByEmailAndPassDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserByEmailAndPassCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserByIdDelegate;
        
        private EndOperationDelegate onEndGetUserByIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserByEmailDelegate;
        
        private EndOperationDelegate onEndGetUserByEmailDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserByEmailCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFolderDelegate;
        
        private EndOperationDelegate onEndGetFolderDelegate;
        
        private System.Threading.SendOrPostCallback onGetFolderCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRootFolderIdDelegate;
        
        private EndOperationDelegate onEndGetRootFolderIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetRootFolderIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDocumentByIdDelegate;
        
        private EndOperationDelegate onEndGetDocumentByIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetDocumentByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteFolderDelegate;
        
        private EndOperationDelegate onEndDeleteFolderDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteFolderCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteDocumentReferenceDelegate;
        
        private EndOperationDelegate onEndDeleteDocumentReferenceDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteDocumentReferenceCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteDocumentDelegate;
        
        private EndOperationDelegate onEndDeleteDocumentDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteDocumentCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllUserDocumentsByUserIdDelegate;
        
        private EndOperationDelegate onEndGetAllUserDocumentsByUserIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllUserDocumentsByUserIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDocumentContentDelegate;
        
        private EndOperationDelegate onEndGetDocumentContentDelegate;
        
        private System.Threading.SendOrPostCallback onGetDocumentContentCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLatestDocumentContentDelegate;
        
        private EndOperationDelegate onEndGetLatestDocumentContentDelegate;
        
        private System.Threading.SendOrPostCallback onGetLatestDocumentContentCompletedDelegate;
        
        private BeginOperationDelegate onBeginSyncDocumentDelegate;
        
        private EndOperationDelegate onEndSyncDocumentDelegate;
        
        private System.Threading.SendOrPostCallback onSyncDocumentCompletedDelegate;
        
        private BeginOperationDelegate onBeginSyncDocumentWebDelegate;
        
        private EndOperationDelegate onEndSyncDocumentWebDelegate;
        
        private System.Threading.SendOrPostCallback onSyncDocumentWebCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDocumentIdDelegate;
        
        private EndOperationDelegate onEndGetDocumentIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetDocumentIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddUserDocumentDelegate;
        
        private EndOperationDelegate onEndAddUserDocumentDelegate;
        
        private System.Threading.SendOrPostCallback onAddUserDocumentCompletedDelegate;
        
        private BeginOperationDelegate onBeginFolderExistsDelegate;
        
        private EndOperationDelegate onEndFolderExistsDelegate;
        
        private System.Threading.SendOrPostCallback onFolderExistsCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddUserDocumentInRootDelegate;
        
        private EndOperationDelegate onEndAddUserDocumentInRootDelegate;
        
        private System.Threading.SendOrPostCallback onAddUserDocumentInRootCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllDocumentRevisionsByDocumentIdDelegate;
        
        private EndOperationDelegate onEndGetAllDocumentRevisionsByDocumentIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllDocumentRevisionsByDocumentIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllFilesAndFoldersByUserIdDelegate;
        
        private EndOperationDelegate onEndGetAllFilesAndFoldersByUserIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllFilesAndFoldersByUserIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLatestPureDocumentContentDelegate;
        
        private EndOperationDelegate onEndGetLatestPureDocumentContentDelegate;
        
        private System.Threading.SendOrPostCallback onGetLatestPureDocumentContentCompletedDelegate;
        
        private BeginOperationDelegate onBeginShareDocumentWebDelegate;
        
        private EndOperationDelegate onEndShareDocumentWebDelegate;
        
        private System.Threading.SendOrPostCallback onShareDocumentWebCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddDocumentRevisionWebDelegate;
        
        private EndOperationDelegate onEndAddDocumentRevisionWebDelegate;
        
        private System.Threading.SendOrPostCallback onAddDocumentRevisionWebCompletedDelegate;
        
        private BeginOperationDelegate onBeginMoveDocumentWebDelegate;
        
        private EndOperationDelegate onEndMoveDocumentWebDelegate;
        
        private System.Threading.SendOrPostCallback onMoveDocumentWebCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDocumentRevisionContentByIdDelegate;
        
        private EndOperationDelegate onEndGetDocumentRevisionContentByIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetDocumentRevisionContentByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<AddUserCompletedEventArgs> AddUserCompleted;
        
        public event System.EventHandler<AddFolderCompletedEventArgs> AddFolderCompleted;
        
        public event System.EventHandler<AddDocumentWithUserDocumentCompletedEventArgs> AddDocumentWithUserDocumentCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddDocumentRevisionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SaveMergedDocumentCompleted;
        
        public event System.EventHandler<GetUserByEmailAndPassCompletedEventArgs> GetUserByEmailAndPassCompleted;
        
        public event System.EventHandler<GetUserByIdCompletedEventArgs> GetUserByIdCompleted;
        
        public event System.EventHandler<GetUserByEmailCompletedEventArgs> GetUserByEmailCompleted;
        
        public event System.EventHandler<GetFolderCompletedEventArgs> GetFolderCompleted;
        
        public event System.EventHandler<GetRootFolderIdCompletedEventArgs> GetRootFolderIdCompleted;
        
        public event System.EventHandler<GetDocumentByIdCompletedEventArgs> GetDocumentByIdCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteFolderCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteDocumentReferenceCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteDocumentCompleted;
        
        public event System.EventHandler<GetAllUserDocumentsByUserIdCompletedEventArgs> GetAllUserDocumentsByUserIdCompleted;
        
        public event System.EventHandler<GetDocumentContentCompletedEventArgs> GetDocumentContentCompleted;
        
        public event System.EventHandler<GetLatestDocumentContentCompletedEventArgs> GetLatestDocumentContentCompleted;
        
        public event System.EventHandler<SyncDocumentCompletedEventArgs> SyncDocumentCompleted;
        
        public event System.EventHandler<SyncDocumentWebCompletedEventArgs> SyncDocumentWebCompleted;
        
        public event System.EventHandler<GetDocumentIdCompletedEventArgs> GetDocumentIdCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddUserDocumentCompleted;
        
        public event System.EventHandler<FolderExistsCompletedEventArgs> FolderExistsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddUserDocumentInRootCompleted;
        
        public event System.EventHandler<GetAllDocumentRevisionsByDocumentIdCompletedEventArgs> GetAllDocumentRevisionsByDocumentIdCompleted;
        
        public event System.EventHandler<GetAllFilesAndFoldersByUserIdCompletedEventArgs> GetAllFilesAndFoldersByUserIdCompleted;
        
        public event System.EventHandler<GetLatestPureDocumentContentCompletedEventArgs> GetLatestPureDocumentContentCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ShareDocumentWebCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddDocumentRevisionWebCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> MoveDocumentWebCompleted;
        
        public event System.EventHandler<GetDocumentRevisionContentByIdCompletedEventArgs> GetDocumentRevisionContentByIdCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Web_Solution.ServiceReference.IService1.BeginAddUser(string email, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddUser(email, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int Web_Solution.ServiceReference.IService1.EndAddUser(System.IAsyncResult result) {
            return base.Channel.EndAddUser(result);
        }
        
        private System.IAsyncResult OnBeginAddUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string email = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return ((Web_Solution.ServiceReference.IService1)(this)).BeginAddUser(email, password, callback, asyncState);
        }
        
        private object[] OnEndAddUser(System.IAsyncResult result) {
            int retVal = ((Web_Solution.ServiceReference.IService1)(this)).EndAddUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddUserCompleted(object state) {
            if ((this.AddUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddUserCompleted(this, new AddUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddUserAsync(string email, string password) {
            this.AddUserAsync(email, password, null);
        }
        
        public void AddUserAsync(string email, string password, object userState) {
            if ((this.onBeginAddUserDelegate == null)) {
                this.onBeginAddUserDelegate = new BeginOperationDelegate(this.OnBeginAddUser);
            }
            if ((this.onEndAddUserDelegate == null)) {
                this.onEndAddUserDelegate = new EndOperationDelegate(this.OnEndAddUser);
            }
            if ((this.onAddUserCompletedDelegate == null)) {
                this.onAddUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddUserCompleted);
            }
            base.InvokeAsync(this.onBeginAddUserDelegate, new object[] {
                        email,
                        password}, this.onEndAddUserDelegate, this.onAddUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Web_Solution.ServiceReference.IService1.BeginAddFolder(string name, int parentFolderId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddFolder(name, parentFolderId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int Web_Solution.ServiceReference.IService1.EndAddFolder(System.IAsyncResult result) {
            return base.Channel.EndAddFolder(result);
        }
        
        private System.IAsyncResult OnBeginAddFolder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string name = ((string)(inValues[0]));
            int parentFolderId = ((int)(inValues[1]));
            return ((Web_Solution.ServiceReference.IService1)(this)).BeginAddFolder(name, parentFolderId, callback, asyncState);
        }
        
        private object[] OnEndAddFolder(System.IAsyncResult result) {
            int retVal = ((Web_Solution.ServiceReference.IService1)(this)).EndAddFolder(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddFolderCompleted(object state) {
            if ((this.AddFolderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddFolderCompleted(this, new AddFolderCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddFolderAsync(string name, int parentFolderId) {
            this.AddFolderAsync(name, parentFolderId, null);
        }
        
        public void AddFolderAsync(string name, int parentFolderId, object userState) {
            if ((this.onBeginAddFolderDelegate == null)) {
                this.onBeginAddFolderDelegate = new BeginOperationDelegate(this.OnBeginAddFolder);
            }
            if ((this.onEndAddFolderDelegate == null)) {
                this.onEndAddFolderDelegate = new EndOperationDelegate(this.OnEndAddFolder);
            }
            if ((this.onAddFolderCompletedDelegate == null)) {
                this.onAddFolderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddFolderCompleted);
            }
            base.InvokeAsync(this.onBeginAddFolderDelegate, new object[] {
                        name,
                        parentFolderId}, this.onEndAddFolderDelegate, this.onAddFolderCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Web_Solution.ServiceReference.IService1.BeginAddDocumentWithUserDocument(string name, int userId, string filepath, string content, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddDocumentWithUserDocument(name, userId, filepath, content, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int Web_Solution.ServiceReference.IService1.EndAddDocumentWithUserDocument(System.IAsyncResult result) {
            return base.Channel.EndAddDocumentWithUserDocument(result);
        }
        
        private System.IAsyncResult OnBeginAddDocumentWithUserDocument(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string name = ((string)(inValues[0]));
            int userId = ((int)(inValues[1]));
            string filepath = ((string)(inValues[2]));
            string content = ((string)(inValues[3]));
            return ((Web_Solution.ServiceReference.IService1)(this)).BeginAddDocumentWithUserDocument(name, userId, filepath, content, callback, asyncState);
        }
        
        private object[] OnEndAddDocumentWithUserDocument(System.IAsyncResult result) {
            int retVal = ((Web_Solution.ServiceReference.IService1)(this)).EndAddDocumentWithUserDocument(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddDocumentWithUserDocumentCompleted(object state) {
            if ((this.AddDocumentWithUserDocumentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddDocumentWithUserDocumentCompleted(this, new AddDocumentWithUserDocumentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddDocumentWithUserDocumentAsync(string name, int userId, string filepath, string content) {
            this.AddDocumentWithUserDocumentAsync(name, userId, filepath, content, null);
        }
        
        public void AddDocumentWithUserDocumentAsync(string name, int userId, string filepath, string content, object userState) {
            if ((this.onBeginAddDocumentWithUserDocumentDelegate == null)) {
                this.onBeginAddDocumentWithUserDocumentDelegate = new BeginOperationDelegate(this.OnBeginAddDocumentWithUserDocument);
            }
            if ((this.onEndAddDocumentWithUserDocumentDelegate == null)) {
                this.onEndAddDocumentWithUserDocumentDelegate = new EndOperationDelegate(this.OnEndAddDocumentWithUserDocument);
            }
            if ((this.onAddDocumentWithUserDocumentCompletedDelegate == null)) {
                this.onAddDocumentWithUserDocumentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddDocumentWithUserDocumentCompleted);
            }
            base.InvokeAsync(this.onBeginAddDocumentWithUserDocumentDelegate, new object[] {
                        name,
                        userId,
                        filepath,
                        content}, this.onEndAddDocumentWithUserDocumentDelegate, this.onAddDocumentWithUserDocumentCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Web_Solution.ServiceReference.IService1.BeginAddDocumentRevision(int editorId, int documentId, string content, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddDocumentRevision(editorId, documentId, content, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Web_Solution.ServiceReference.IService1.EndAddDocumentRevision(System.IAsyncResult result) {
            base.Channel.EndAddDocumentRevision(result);
        }
        
        private System.IAsyncResult OnBeginAddDocumentRevision(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int editorId = ((int)(inValues[0]));
            int documentId = ((int)(inValues[1]));
            string content = ((string)(inValues[2]));
            return ((Web_Solution.ServiceReference.IService1)(this)).BeginAddDocumentRevision(editorId, documentId, content, callback, asyncState);
        }
        
        private object[] OnEndAddDocumentRevision(System.IAsyncResult result) {
            ((Web_Solution.ServiceReference.IService1)(this)).EndAddDocumentRevision(result);
            return null;
        }
        
        private void OnAddDocumentRevisionCompleted(object state) {
            if ((this.AddDocumentRevisionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddDocumentRevisionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddDocumentRevisionAsync(int editorId, int documentId, string content) {
            this.AddDocumentRevisionAsync(editorId, documentId, content, null);
        }
        
        public void AddDocumentRevisionAsync(int editorId, int documentId, string content, object userState) {
            if ((this.onBeginAddDocumentRevisionDelegate == null)) {
                this.onBeginAddDocumentRevisionDelegate = new BeginOperationDelegate(this.OnBeginAddDocumentRevision);
            }
            if ((this.onEndAddDocumentRevisionDelegate == null)) {
                this.onEndAddDocumentRevisionDelegate = new EndOperationDelegate(this.OnEndAddDocumentRevision);
            }
            if ((this.onAddDocumentRevisionCompletedDelegate == null)) {
                this.onAddDocumentRevisionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddDocumentRevisionCompleted);
            }
            base.InvokeAsync(this.onBeginAddDocumentRevisionDelegate, new object[] {
                        editorId,
                        documentId,
                        content}, this.onEndAddDocumentRevisionDelegate, this.onAddDocumentRevisionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Web_Solution.ServiceReference.IService1.BeginSaveMergedDocument(int editorId, int documentId, string content, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveMergedDocument(editorId, documentId, content, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Web_Solution.ServiceReference.IService1.EndSaveMergedDocument(System.IAsyncResult result) {
            base.Channel.EndSaveMergedDocument(result);
        }
        
        private System.IAsyncResult OnBeginSaveMergedDocument(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int editorId = ((int)(inValues[0]));
            int documentId = ((int)(inValues[1]));
            string content = ((string)(inValues[2]));
            return ((Web_Solution.ServiceReference.IService1)(this)).BeginSaveMergedDocument(editorId, documentId, content, callback, asyncState);
        }
        
        private object[] OnEndSaveMergedDocument(System.IAsyncResult result) {
            ((Web_Solution.ServiceReference.IService1)(this)).EndSaveMergedDocument(result);
            return null;
        }
        
        private void OnSaveMergedDocumentCompleted(object state) {
            if ((this.SaveMergedDocumentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveMergedDocumentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveMergedDocumentAsync(int editorId, int documentId, string content) {
            this.SaveMergedDocumentAsync(editorId, documentId, content, null);
        }
        
        public void SaveMergedDocumentAsync(int editorId, int documentId, string content, object userState) {
            if ((this.onBeginSaveMergedDocumentDelegate == null)) {
                this.onBeginSaveMergedDocumentDelegate = new BeginOperationDelegate(this.OnBeginSaveMergedDocument);
            }
            if ((this.onEndSaveMergedDocumentDelegate == null)) {
                this.onEndSaveMergedDocumentDelegate = new EndOperationDelegate(this.OnEndSaveMergedDocument);
            }
            if ((this.onSaveMergedDocumentCompletedDelegate == null)) {
                this.onSaveMergedDocumentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveMergedDocumentCompleted);
            }
            base.InvokeAsync(this.onBeginSaveMergedDocumentDelegate, new object[] {
                        editorId,
                        documentId,
                        content}, this.onEndSaveMergedDocumentDelegate, this.onSaveMergedDocumentCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Web_Solution.ServiceReference.IService1.BeginGetUserByEmailAndPass(string email, string pass, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserByEmailAndPass(email, pass, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Web_Solution.ServiceReference.ServiceUser Web_Solution.ServiceReference.IService1.EndGetUserByEmailAndPass(System.IAsyncResult result) {
            return base.Channel.EndGetUserByEmailAndPass(result);
        }
        
        private System.IAsyncResult OnBeginGetUserByEmailAndPass(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string email = ((string)(inValues[0]));
            string pass = ((string)(inValues[1]));
            return ((Web_Solution.ServiceReference.IService1)(this)).BeginGetUserByEmailAndPass(email, pass, callback, asyncState);
        }
        
        private object[] OnEndGetUserByEmailAndPass(System.IAsyncResult result) {
            Web_Solution.ServiceReference.ServiceUser retVal = ((Web_Solution.ServiceReference.IService1)(this)).EndGetUserByEmailAndPass(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserByEmailAndPassCompleted(object state) {
            if ((this.GetUserByEmailAndPassCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserByEmailAndPassCompleted(this, new GetUserByEmailAndPassCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserByEmailAndPassAsync(string email, string pass) {
            this.GetUserByEmailAndPassAsync(email, pass, null);
        }
        
        public void GetUserByEmailAndPassAsync(string email, string pass, object userState) {
            if ((this.onBeginGetUserByEmailAndPassDelegate == null)) {
                this.onBeginGetUserByEmailAndPassDelegate = new BeginOperationDelegate(this.OnBeginGetUserByEmailAndPass);
            }
            if ((this.onEndGetUserByEmailAndPassDelegate == null)) {
                this.onEndGetUserByEmailAndPassDelegate = new EndOperationDelegate(this.OnEndGetUserByEmailAndPass);
            }
            if ((this.onGetUserByEmailAndPassCompletedDelegate == null)) {
                this.onGetUserByEmailAndPassCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserByEmailAndPassCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserByEmailAndPassDelegate, new object[] {
                        email,
                        pass}, this.onEndGetUserByEmailAndPassDelegate, this.onGetUserByEmailAndPassCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Web_Solution.ServiceReference.IService1.BeginGetUserById(int userId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserById(userId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Web_Solution.ServiceReference.ServiceUser Web_Solution.ServiceReference.IService1.EndGetUserById(System.IAsyncResult result) {
            return base.Channel.EndGetUserById(result);
        }
        
        private System.IAsyncResult OnBeginGetUserById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userId = ((int)(inValues[0]));
            return ((Web_Solution.ServiceReference.IService1)(this)).BeginGetUserById(userId, callback, asyncState);
        }
        
        private object[] OnEndGetUserById(System.IAsyncResult result) {
            Web_Solution.ServiceReference.ServiceUser retVal = ((Web_Solution.ServiceReference.IService1)(this)).EndGetUserById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserByIdCompleted(object state) {
            if ((this.GetUserByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserByIdCompleted(this, new GetUserByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserByIdAsync(int userId) {
            this.GetUserByIdAsync(userId, null);
        }
        
        public void GetUserByIdAsync(int userId, object userState) {
            if ((this.onBeginGetUserByIdDelegate == null)) {
                this.onBeginGetUserByIdDelegate = new BeginOperationDelegate(this.OnBeginGetUserById);
            }
            if ((this.onEndGetUserByIdDelegate == null)) {
                this.onEndGetUserByIdDelegate = new EndOperationDelegate(this.OnEndGetUserById);
            }
            if ((this.onGetUserByIdCompletedDelegate == null)) {
                this.onGetUserByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserByIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserByIdDelegate, new object[] {
                        userId}, this.onEndGetUserByIdDelegate, this.onGetUserByIdCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Web_Solution.ServiceReference.IService1.BeginGetUserByEmail(string email, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserByEmail(email, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Web_Solution.ServiceReference.ServiceUser Web_Solution.ServiceReference.IService1.EndGetUserByEmail(System.IAsyncResult result) {
            return base.Channel.EndGetUserByEmail(result);
        }
        
        private System.IAsyncResult OnBeginGetUserByEmail(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string email = ((string)(inValues[0]));
            return ((Web_Solution.ServiceReference.IService1)(this)).BeginGetUserByEmail(email, callback, asyncState);
        }
        
        private object[] OnEndGetUserByEmail(System.IAsyncResult result) {
            Web_Solution.ServiceReference.ServiceUser retVal = ((Web_Solution.ServiceReference.IService1)(this)).EndGetUserByEmail(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserByEmailCompleted(object state) {
            if ((this.GetUserByEmailCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserByEmailCompleted(this, new GetUserByEmailCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserByEmailAsync(string email) {
            this.GetUserByEmailAsync(email, null);
        }
        
        public void GetUserByEmailAsync(string email, object userState) {
            if ((this.onBeginGetUserByEmailDelegate == null)) {
                this.onBeginGetUserByEmailDelegate = new BeginOperationDelegate(this.OnBeginGetUserByEmail);
            }
            if ((this.onEndGetUserByEmailDelegate == null)) {
                this.onEndGetUserByEmailDelegate = new EndOperationDelegate(this.OnEndGetUserByEmail);
            }
            if ((this.onGetUserByEmailCompletedDelegate == null)) {
                this.onGetUserByEmailCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserByEmailCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserByEmailDelegate, new object[] {
                        email}, this.onEndGetUserByEmailDelegate, this.onGetUserByEmailCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Web_Solution.ServiceReference.IService1.BeginGetFolder(int folderId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFolder(folderId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Web_Solution.ServiceReference.ServiceFolder Web_Solution.ServiceReference.IService1.EndGetFolder(System.IAsyncResult result) {
            return base.Channel.EndGetFolder(result);
        }
        
        private System.IAsyncResult OnBeginGetFolder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int folderId = ((int)(inValues[0]));
            return ((Web_Solution.ServiceReference.IService1)(this)).BeginGetFolder(folderId, callback, asyncState);
        }
        
        private object[] OnEndGetFolder(System.IAsyncResult result) {
            Web_Solution.ServiceReference.ServiceFolder retVal = ((Web_Solution.ServiceReference.IService1)(this)).EndGetFolder(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFolderCompleted(object state) {
            if ((this.GetFolderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFolderCompleted(this, new GetFolderCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFolderAsync(int folderId) {
            this.GetFolderAsync(folderId, null);
        }
        
        public void GetFolderAsync(int folderId, object userState) {
            if ((this.onBeginGetFolderDelegate == null)) {
                this.onBeginGetFolderDelegate = new BeginOperationDelegate(this.OnBeginGetFolder);
            }
            if ((this.onEndGetFolderDelegate == null)) {
                this.onEndGetFolderDelegate = new EndOperationDelegate(this.OnEndGetFolder);
            }
            if ((this.onGetFolderCompletedDelegate == null)) {
                this.onGetFolderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFolderCompleted);
            }
            base.InvokeAsync(this.onBeginGetFolderDelegate, new object[] {
                        folderId}, this.onEndGetFolderDelegate, this.onGetFolderCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Web_Solution.ServiceReference.IService1.BeginGetRootFolderId(int userId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRootFolderId(userId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int Web_Solution.ServiceReference.IService1.EndGetRootFolderId(System.IAsyncResult result) {
            return base.Channel.EndGetRootFolderId(result);
        }
        
        private System.IAsyncResult OnBeginGetRootFolderId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userId = ((int)(inValues[0]));
            return ((Web_Solution.ServiceReference.IService1)(this)).BeginGetRootFolderId(userId, callback, asyncState);
        }
        
        private object[] OnEndGetRootFolderId(System.IAsyncResult result) {
            int retVal = ((Web_Solution.ServiceReference.IService1)(this)).EndGetRootFolderId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRootFolderIdCompleted(object state) {
            if ((this.GetRootFolderIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRootFolderIdCompleted(this, new GetRootFolderIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRootFolderIdAsync(int userId) {
            this.GetRootFolderIdAsync(userId, null);
        }
        
        public void GetRootFolderIdAsync(int userId, object userState) {
            if ((this.onBeginGetRootFolderIdDelegate == null)) {
                this.onBeginGetRootFolderIdDelegate = new BeginOperationDelegate(this.OnBeginGetRootFolderId);
            }
            if ((this.onEndGetRootFolderIdDelegate == null)) {
                this.onEndGetRootFolderIdDelegate = new EndOperationDelegate(this.OnEndGetRootFolderId);
            }
            if ((this.onGetRootFolderIdCompletedDelegate == null)) {
                this.onGetRootFolderIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRootFolderIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetRootFolderIdDelegate, new object[] {
                        userId}, this.onEndGetRootFolderIdDelegate, this.onGetRootFolderIdCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Web_Solution.ServiceReference.IService1.BeginGetDocumentById(int documentId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDocumentById(documentId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Web_Solution.ServiceReference.ServiceDocument Web_Solution.ServiceReference.IService1.EndGetDocumentById(System.IAsyncResult result) {
            return base.Channel.EndGetDocumentById(result);
        }
        
        private System.IAsyncResult OnBeginGetDocumentById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int documentId = ((int)(inValues[0]));
            return ((Web_Solution.ServiceReference.IService1)(this)).BeginGetDocumentById(documentId, callback, asyncState);
        }
        
        private object[] OnEndGetDocumentById(System.IAsyncResult result) {
            Web_Solution.ServiceReference.ServiceDocument retVal = ((Web_Solution.ServiceReference.IService1)(this)).EndGetDocumentById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDocumentByIdCompleted(object state) {
            if ((this.GetDocumentByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDocumentByIdCompleted(this, new GetDocumentByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDocumentByIdAsync(int documentId) {
            this.GetDocumentByIdAsync(documentId, null);
        }
        
        public void GetDocumentByIdAsync(int documentId, object userState) {
            if ((this.onBeginGetDocumentByIdDelegate == null)) {
                this.onBeginGetDocumentByIdDelegate = new BeginOperationDelegate(this.OnBeginGetDocumentById);
            }
            if ((this.onEndGetDocumentByIdDelegate == null)) {
                this.onEndGetDocumentByIdDelegate = new EndOperationDelegate(this.OnEndGetDocumentById);
            }
            if ((this.onGetDocumentByIdCompletedDelegate == null)) {
                this.onGetDocumentByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDocumentByIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetDocumentByIdDelegate, new object[] {
                        documentId}, this.onEndGetDocumentByIdDelegate, this.onGetDocumentByIdCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Web_Solution.ServiceReference.IService1.BeginDeleteFolder(int folderId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteFolder(folderId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Web_Solution.ServiceReference.IService1.EndDeleteFolder(System.IAsyncResult result) {
            base.Channel.EndDeleteFolder(result);
        }
        
        private System.IAsyncResult OnBeginDeleteFolder(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int folderId = ((int)(inValues[0]));
            return ((Web_Solution.ServiceReference.IService1)(this)).BeginDeleteFolder(folderId, callback, asyncState);
        }
        
        private object[] OnEndDeleteFolder(System.IAsyncResult result) {
            ((Web_Solution.ServiceReference.IService1)(this)).EndDeleteFolder(result);
            return null;
        }
        
        private void OnDeleteFolderCompleted(object state) {
            if ((this.DeleteFolderCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteFolderCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteFolderAsync(int folderId) {
            this.DeleteFolderAsync(folderId, null);
        }
        
        public void DeleteFolderAsync(int folderId, object userState) {
            if ((this.onBeginDeleteFolderDelegate == null)) {
                this.onBeginDeleteFolderDelegate = new BeginOperationDelegate(this.OnBeginDeleteFolder);
            }
            if ((this.onEndDeleteFolderDelegate == null)) {
                this.onEndDeleteFolderDelegate = new EndOperationDelegate(this.OnEndDeleteFolder);
            }
            if ((this.onDeleteFolderCompletedDelegate == null)) {
                this.onDeleteFolderCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteFolderCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteFolderDelegate, new object[] {
                        folderId}, this.onEndDeleteFolderDelegate, this.onDeleteFolderCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Web_Solution.ServiceReference.IService1.BeginDeleteDocumentReference(int userId, int documentId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteDocumentReference(userId, documentId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Web_Solution.ServiceReference.IService1.EndDeleteDocumentReference(System.IAsyncResult result) {
            base.Channel.EndDeleteDocumentReference(result);
        }
        
        private System.IAsyncResult OnBeginDeleteDocumentReference(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userId = ((int)(inValues[0]));
            int documentId = ((int)(inValues[1]));
            return ((Web_Solution.ServiceReference.IService1)(this)).BeginDeleteDocumentReference(userId, documentId, callback, asyncState);
        }
        
        private object[] OnEndDeleteDocumentReference(System.IAsyncResult result) {
            ((Web_Solution.ServiceReference.IService1)(this)).EndDeleteDocumentReference(result);
            return null;
        }
        
        private void OnDeleteDocumentReferenceCompleted(object state) {
            if ((this.DeleteDocumentReferenceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteDocumentReferenceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteDocumentReferenceAsync(int userId, int documentId) {
            this.DeleteDocumentReferenceAsync(userId, documentId, null);
        }
        
        public void DeleteDocumentReferenceAsync(int userId, int documentId, object userState) {
            if ((this.onBeginDeleteDocumentReferenceDelegate == null)) {
                this.onBeginDeleteDocumentReferenceDelegate = new BeginOperationDelegate(this.OnBeginDeleteDocumentReference);
            }
            if ((this.onEndDeleteDocumentReferenceDelegate == null)) {
                this.onEndDeleteDocumentReferenceDelegate = new EndOperationDelegate(this.OnEndDeleteDocumentReference);
            }
            if ((this.onDeleteDocumentReferenceCompletedDelegate == null)) {
                this.onDeleteDocumentReferenceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteDocumentReferenceCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteDocumentReferenceDelegate, new object[] {
                        userId,
                        documentId}, this.onEndDeleteDocumentReferenceDelegate, this.onDeleteDocumentReferenceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Web_Solution.ServiceReference.IService1.BeginDeleteDocument(int documentId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteDocument(documentId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Web_Solution.ServiceReference.IService1.EndDeleteDocument(System.IAsyncResult result) {
            base.Channel.EndDeleteDocument(result);
        }
        
        private System.IAsyncResult OnBeginDeleteDocument(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int documentId = ((int)(inValues[0]));
            return ((Web_Solution.ServiceReference.IService1)(this)).BeginDeleteDocument(documentId, callback, asyncState);
        }
        
        private object[] OnEndDeleteDocument(System.IAsyncResult result) {
            ((Web_Solution.ServiceReference.IService1)(this)).EndDeleteDocument(result);
            return null;
        }
        
        private void OnDeleteDocumentCompleted(object state) {
            if ((this.DeleteDocumentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteDocumentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteDocumentAsync(int documentId) {
            this.DeleteDocumentAsync(documentId, null);
        }
        
        public void DeleteDocumentAsync(int documentId, object userState) {
            if ((this.onBeginDeleteDocumentDelegate == null)) {
                this.onBeginDeleteDocumentDelegate = new BeginOperationDelegate(this.OnBeginDeleteDocument);
            }
            if ((this.onEndDeleteDocumentDelegate == null)) {
                this.onEndDeleteDocumentDelegate = new EndOperationDelegate(this.OnEndDeleteDocument);
            }
            if ((this.onDeleteDocumentCompletedDelegate == null)) {
                this.onDeleteDocumentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteDocumentCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteDocumentDelegate, new object[] {
                        documentId}, this.onEndDeleteDocumentDelegate, this.onDeleteDocumentCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Web_Solution.ServiceReference.IService1.BeginGetAllUserDocumentsByUserId(int userId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllUserDocumentsByUserId(userId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<Web_Solution.ServiceReference.ServiceUserdocument> Web_Solution.ServiceReference.IService1.EndGetAllUserDocumentsByUserId(System.IAsyncResult result) {
            return base.Channel.EndGetAllUserDocumentsByUserId(result);
        }
        
        private System.IAsyncResult OnBeginGetAllUserDocumentsByUserId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userId = ((int)(inValues[0]));
            return ((Web_Solution.ServiceReference.IService1)(this)).BeginGetAllUserDocumentsByUserId(userId, callback, asyncState);
        }
        
        private object[] OnEndGetAllUserDocumentsByUserId(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<Web_Solution.ServiceReference.ServiceUserdocument> retVal = ((Web_Solution.ServiceReference.IService1)(this)).EndGetAllUserDocumentsByUserId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllUserDocumentsByUserIdCompleted(object state) {
            if ((this.GetAllUserDocumentsByUserIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllUserDocumentsByUserIdCompleted(this, new GetAllUserDocumentsByUserIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllUserDocumentsByUserIdAsync(int userId) {
            this.GetAllUserDocumentsByUserIdAsync(userId, null);
        }
        
        public void GetAllUserDocumentsByUserIdAsync(int userId, object userState) {
            if ((this.onBeginGetAllUserDocumentsByUserIdDelegate == null)) {
                this.onBeginGetAllUserDocumentsByUserIdDelegate = new BeginOperationDelegate(this.OnBeginGetAllUserDocumentsByUserId);
            }
            if ((this.onEndGetAllUserDocumentsByUserIdDelegate == null)) {
                this.onEndGetAllUserDocumentsByUserIdDelegate = new EndOperationDelegate(this.OnEndGetAllUserDocumentsByUserId);
            }
            if ((this.onGetAllUserDocumentsByUserIdCompletedDelegate == null)) {
                this.onGetAllUserDocumentsByUserIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllUserDocumentsByUserIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllUserDocumentsByUserIdDelegate, new object[] {
                        userId}, this.onEndGetAllUserDocumentsByUserIdDelegate, this.onGetAllUserDocumentsByUserIdCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Web_Solution.ServiceReference.IService1.BeginGetDocumentContent(string directoryPath, string filename, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDocumentContent(directoryPath, filename, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Web_Solution.ServiceReference.IService1.EndGetDocumentContent(System.IAsyncResult result) {
            return base.Channel.EndGetDocumentContent(result);
        }
        
        private System.IAsyncResult OnBeginGetDocumentContent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string directoryPath = ((string)(inValues[0]));
            string filename = ((string)(inValues[1]));
            return ((Web_Solution.ServiceReference.IService1)(this)).BeginGetDocumentContent(directoryPath, filename, callback, asyncState);
        }
        
        private object[] OnEndGetDocumentContent(System.IAsyncResult result) {
            string retVal = ((Web_Solution.ServiceReference.IService1)(this)).EndGetDocumentContent(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDocumentContentCompleted(object state) {
            if ((this.GetDocumentContentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDocumentContentCompleted(this, new GetDocumentContentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDocumentContentAsync(string directoryPath, string filename) {
            this.GetDocumentContentAsync(directoryPath, filename, null);
        }
        
        public void GetDocumentContentAsync(string directoryPath, string filename, object userState) {
            if ((this.onBeginGetDocumentContentDelegate == null)) {
                this.onBeginGetDocumentContentDelegate = new BeginOperationDelegate(this.OnBeginGetDocumentContent);
            }
            if ((this.onEndGetDocumentContentDelegate == null)) {
                this.onEndGetDocumentContentDelegate = new EndOperationDelegate(this.OnEndGetDocumentContent);
            }
            if ((this.onGetDocumentContentCompletedDelegate == null)) {
                this.onGetDocumentContentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDocumentContentCompleted);
            }
            base.InvokeAsync(this.onBeginGetDocumentContentDelegate, new object[] {
                        directoryPath,
                        filename}, this.onEndGetDocumentContentDelegate, this.onGetDocumentContentCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Web_Solution.ServiceReference.IService1.BeginGetLatestDocumentContent(int documentId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLatestDocumentContent(documentId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Web_Solution.ServiceReference.IService1.EndGetLatestDocumentContent(System.IAsyncResult result) {
            return base.Channel.EndGetLatestDocumentContent(result);
        }
        
        private System.IAsyncResult OnBeginGetLatestDocumentContent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int documentId = ((int)(inValues[0]));
            return ((Web_Solution.ServiceReference.IService1)(this)).BeginGetLatestDocumentContent(documentId, callback, asyncState);
        }
        
        private object[] OnEndGetLatestDocumentContent(System.IAsyncResult result) {
            string retVal = ((Web_Solution.ServiceReference.IService1)(this)).EndGetLatestDocumentContent(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLatestDocumentContentCompleted(object state) {
            if ((this.GetLatestDocumentContentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLatestDocumentContentCompleted(this, new GetLatestDocumentContentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLatestDocumentContentAsync(int documentId) {
            this.GetLatestDocumentContentAsync(documentId, null);
        }
        
        public void GetLatestDocumentContentAsync(int documentId, object userState) {
            if ((this.onBeginGetLatestDocumentContentDelegate == null)) {
                this.onBeginGetLatestDocumentContentDelegate = new BeginOperationDelegate(this.OnBeginGetLatestDocumentContent);
            }
            if ((this.onEndGetLatestDocumentContentDelegate == null)) {
                this.onEndGetLatestDocumentContentDelegate = new EndOperationDelegate(this.OnEndGetLatestDocumentContent);
            }
            if ((this.onGetLatestDocumentContentCompletedDelegate == null)) {
                this.onGetLatestDocumentContentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLatestDocumentContentCompleted);
            }
            base.InvokeAsync(this.onBeginGetLatestDocumentContentDelegate, new object[] {
                        documentId}, this.onEndGetLatestDocumentContentDelegate, this.onGetLatestDocumentContentCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Web_Solution.ServiceReference.IService1.BeginSyncDocument(int editorId, int documentId, string filepath, string fileContent, string title, string pureContent, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSyncDocument(editorId, documentId, filepath, fileContent, title, pureContent, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<string>> Web_Solution.ServiceReference.IService1.EndSyncDocument(System.IAsyncResult result) {
            return base.Channel.EndSyncDocument(result);
        }
        
        private System.IAsyncResult OnBeginSyncDocument(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int editorId = ((int)(inValues[0]));
            int documentId = ((int)(inValues[1]));
            string filepath = ((string)(inValues[2]));
            string fileContent = ((string)(inValues[3]));
            string title = ((string)(inValues[4]));
            string pureContent = ((string)(inValues[5]));
            return ((Web_Solution.ServiceReference.IService1)(this)).BeginSyncDocument(editorId, documentId, filepath, fileContent, title, pureContent, callback, asyncState);
        }
        
        private object[] OnEndSyncDocument(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<string>> retVal = ((Web_Solution.ServiceReference.IService1)(this)).EndSyncDocument(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSyncDocumentCompleted(object state) {
            if ((this.SyncDocumentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SyncDocumentCompleted(this, new SyncDocumentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SyncDocumentAsync(int editorId, int documentId, string filepath, string fileContent, string title, string pureContent) {
            this.SyncDocumentAsync(editorId, documentId, filepath, fileContent, title, pureContent, null);
        }
        
        public void SyncDocumentAsync(int editorId, int documentId, string filepath, string fileContent, string title, string pureContent, object userState) {
            if ((this.onBeginSyncDocumentDelegate == null)) {
                this.onBeginSyncDocumentDelegate = new BeginOperationDelegate(this.OnBeginSyncDocument);
            }
            if ((this.onEndSyncDocumentDelegate == null)) {
                this.onEndSyncDocumentDelegate = new EndOperationDelegate(this.OnEndSyncDocument);
            }
            if ((this.onSyncDocumentCompletedDelegate == null)) {
                this.onSyncDocumentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSyncDocumentCompleted);
            }
            base.InvokeAsync(this.onBeginSyncDocumentDelegate, new object[] {
                        editorId,
                        documentId,
                        filepath,
                        fileContent,
                        title,
                        pureContent}, this.onEndSyncDocumentDelegate, this.onSyncDocumentCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Web_Solution.ServiceReference.IService1.BeginSyncDocumentWeb(int editorId, int documentId, string filepath, string metadata, string title, string pureContent, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSyncDocumentWeb(editorId, documentId, filepath, metadata, title, pureContent, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<string>> Web_Solution.ServiceReference.IService1.EndSyncDocumentWeb(System.IAsyncResult result) {
            return base.Channel.EndSyncDocumentWeb(result);
        }
        
        private System.IAsyncResult OnBeginSyncDocumentWeb(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int editorId = ((int)(inValues[0]));
            int documentId = ((int)(inValues[1]));
            string filepath = ((string)(inValues[2]));
            string metadata = ((string)(inValues[3]));
            string title = ((string)(inValues[4]));
            string pureContent = ((string)(inValues[5]));
            return ((Web_Solution.ServiceReference.IService1)(this)).BeginSyncDocumentWeb(editorId, documentId, filepath, metadata, title, pureContent, callback, asyncState);
        }
        
        private object[] OnEndSyncDocumentWeb(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<string>> retVal = ((Web_Solution.ServiceReference.IService1)(this)).EndSyncDocumentWeb(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSyncDocumentWebCompleted(object state) {
            if ((this.SyncDocumentWebCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SyncDocumentWebCompleted(this, new SyncDocumentWebCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SyncDocumentWebAsync(int editorId, int documentId, string filepath, string metadata, string title, string pureContent) {
            this.SyncDocumentWebAsync(editorId, documentId, filepath, metadata, title, pureContent, null);
        }
        
        public void SyncDocumentWebAsync(int editorId, int documentId, string filepath, string metadata, string title, string pureContent, object userState) {
            if ((this.onBeginSyncDocumentWebDelegate == null)) {
                this.onBeginSyncDocumentWebDelegate = new BeginOperationDelegate(this.OnBeginSyncDocumentWeb);
            }
            if ((this.onEndSyncDocumentWebDelegate == null)) {
                this.onEndSyncDocumentWebDelegate = new EndOperationDelegate(this.OnEndSyncDocumentWeb);
            }
            if ((this.onSyncDocumentWebCompletedDelegate == null)) {
                this.onSyncDocumentWebCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSyncDocumentWebCompleted);
            }
            base.InvokeAsync(this.onBeginSyncDocumentWebDelegate, new object[] {
                        editorId,
                        documentId,
                        filepath,
                        metadata,
                        title,
                        pureContent}, this.onEndSyncDocumentWebDelegate, this.onSyncDocumentWebCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Web_Solution.ServiceReference.IService1.BeginGetDocumentId(int userId, string title, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDocumentId(userId, title, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int Web_Solution.ServiceReference.IService1.EndGetDocumentId(System.IAsyncResult result) {
            return base.Channel.EndGetDocumentId(result);
        }
        
        private System.IAsyncResult OnBeginGetDocumentId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userId = ((int)(inValues[0]));
            string title = ((string)(inValues[1]));
            return ((Web_Solution.ServiceReference.IService1)(this)).BeginGetDocumentId(userId, title, callback, asyncState);
        }
        
        private object[] OnEndGetDocumentId(System.IAsyncResult result) {
            int retVal = ((Web_Solution.ServiceReference.IService1)(this)).EndGetDocumentId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDocumentIdCompleted(object state) {
            if ((this.GetDocumentIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDocumentIdCompleted(this, new GetDocumentIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDocumentIdAsync(int userId, string title) {
            this.GetDocumentIdAsync(userId, title, null);
        }
        
        public void GetDocumentIdAsync(int userId, string title, object userState) {
            if ((this.onBeginGetDocumentIdDelegate == null)) {
                this.onBeginGetDocumentIdDelegate = new BeginOperationDelegate(this.OnBeginGetDocumentId);
            }
            if ((this.onEndGetDocumentIdDelegate == null)) {
                this.onEndGetDocumentIdDelegate = new EndOperationDelegate(this.OnEndGetDocumentId);
            }
            if ((this.onGetDocumentIdCompletedDelegate == null)) {
                this.onGetDocumentIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDocumentIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetDocumentIdDelegate, new object[] {
                        userId,
                        title}, this.onEndGetDocumentIdDelegate, this.onGetDocumentIdCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Web_Solution.ServiceReference.IService1.BeginAddUserDocument(int userId, int documentId, string filepath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddUserDocument(userId, documentId, filepath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Web_Solution.ServiceReference.IService1.EndAddUserDocument(System.IAsyncResult result) {
            base.Channel.EndAddUserDocument(result);
        }
        
        private System.IAsyncResult OnBeginAddUserDocument(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userId = ((int)(inValues[0]));
            int documentId = ((int)(inValues[1]));
            string filepath = ((string)(inValues[2]));
            return ((Web_Solution.ServiceReference.IService1)(this)).BeginAddUserDocument(userId, documentId, filepath, callback, asyncState);
        }
        
        private object[] OnEndAddUserDocument(System.IAsyncResult result) {
            ((Web_Solution.ServiceReference.IService1)(this)).EndAddUserDocument(result);
            return null;
        }
        
        private void OnAddUserDocumentCompleted(object state) {
            if ((this.AddUserDocumentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddUserDocumentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddUserDocumentAsync(int userId, int documentId, string filepath) {
            this.AddUserDocumentAsync(userId, documentId, filepath, null);
        }
        
        public void AddUserDocumentAsync(int userId, int documentId, string filepath, object userState) {
            if ((this.onBeginAddUserDocumentDelegate == null)) {
                this.onBeginAddUserDocumentDelegate = new BeginOperationDelegate(this.OnBeginAddUserDocument);
            }
            if ((this.onEndAddUserDocumentDelegate == null)) {
                this.onEndAddUserDocumentDelegate = new EndOperationDelegate(this.OnEndAddUserDocument);
            }
            if ((this.onAddUserDocumentCompletedDelegate == null)) {
                this.onAddUserDocumentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddUserDocumentCompleted);
            }
            base.InvokeAsync(this.onBeginAddUserDocumentDelegate, new object[] {
                        userId,
                        documentId,
                        filepath}, this.onEndAddUserDocumentDelegate, this.onAddUserDocumentCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Web_Solution.ServiceReference.IService1.BeginFolderExists(int parentFolderId, string name, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFolderExists(parentFolderId, name, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int Web_Solution.ServiceReference.IService1.EndFolderExists(System.IAsyncResult result) {
            return base.Channel.EndFolderExists(result);
        }
        
        private System.IAsyncResult OnBeginFolderExists(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int parentFolderId = ((int)(inValues[0]));
            string name = ((string)(inValues[1]));
            return ((Web_Solution.ServiceReference.IService1)(this)).BeginFolderExists(parentFolderId, name, callback, asyncState);
        }
        
        private object[] OnEndFolderExists(System.IAsyncResult result) {
            int retVal = ((Web_Solution.ServiceReference.IService1)(this)).EndFolderExists(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFolderExistsCompleted(object state) {
            if ((this.FolderExistsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FolderExistsCompleted(this, new FolderExistsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FolderExistsAsync(int parentFolderId, string name) {
            this.FolderExistsAsync(parentFolderId, name, null);
        }
        
        public void FolderExistsAsync(int parentFolderId, string name, object userState) {
            if ((this.onBeginFolderExistsDelegate == null)) {
                this.onBeginFolderExistsDelegate = new BeginOperationDelegate(this.OnBeginFolderExists);
            }
            if ((this.onEndFolderExistsDelegate == null)) {
                this.onEndFolderExistsDelegate = new EndOperationDelegate(this.OnEndFolderExists);
            }
            if ((this.onFolderExistsCompletedDelegate == null)) {
                this.onFolderExistsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFolderExistsCompleted);
            }
            base.InvokeAsync(this.onBeginFolderExistsDelegate, new object[] {
                        parentFolderId,
                        name}, this.onEndFolderExistsDelegate, this.onFolderExistsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Web_Solution.ServiceReference.IService1.BeginAddUserDocumentInRoot(int userId, int documentId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddUserDocumentInRoot(userId, documentId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Web_Solution.ServiceReference.IService1.EndAddUserDocumentInRoot(System.IAsyncResult result) {
            base.Channel.EndAddUserDocumentInRoot(result);
        }
        
        private System.IAsyncResult OnBeginAddUserDocumentInRoot(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userId = ((int)(inValues[0]));
            int documentId = ((int)(inValues[1]));
            return ((Web_Solution.ServiceReference.IService1)(this)).BeginAddUserDocumentInRoot(userId, documentId, callback, asyncState);
        }
        
        private object[] OnEndAddUserDocumentInRoot(System.IAsyncResult result) {
            ((Web_Solution.ServiceReference.IService1)(this)).EndAddUserDocumentInRoot(result);
            return null;
        }
        
        private void OnAddUserDocumentInRootCompleted(object state) {
            if ((this.AddUserDocumentInRootCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddUserDocumentInRootCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddUserDocumentInRootAsync(int userId, int documentId) {
            this.AddUserDocumentInRootAsync(userId, documentId, null);
        }
        
        public void AddUserDocumentInRootAsync(int userId, int documentId, object userState) {
            if ((this.onBeginAddUserDocumentInRootDelegate == null)) {
                this.onBeginAddUserDocumentInRootDelegate = new BeginOperationDelegate(this.OnBeginAddUserDocumentInRoot);
            }
            if ((this.onEndAddUserDocumentInRootDelegate == null)) {
                this.onEndAddUserDocumentInRootDelegate = new EndOperationDelegate(this.OnEndAddUserDocumentInRoot);
            }
            if ((this.onAddUserDocumentInRootCompletedDelegate == null)) {
                this.onAddUserDocumentInRootCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddUserDocumentInRootCompleted);
            }
            base.InvokeAsync(this.onBeginAddUserDocumentInRootDelegate, new object[] {
                        userId,
                        documentId}, this.onEndAddUserDocumentInRootDelegate, this.onAddUserDocumentInRootCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Web_Solution.ServiceReference.IService1.BeginGetAllDocumentRevisionsByDocumentId(int documentId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllDocumentRevisionsByDocumentId(documentId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<Web_Solution.ServiceReference.ServiceDocumentrevision> Web_Solution.ServiceReference.IService1.EndGetAllDocumentRevisionsByDocumentId(System.IAsyncResult result) {
            return base.Channel.EndGetAllDocumentRevisionsByDocumentId(result);
        }
        
        private System.IAsyncResult OnBeginGetAllDocumentRevisionsByDocumentId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int documentId = ((int)(inValues[0]));
            return ((Web_Solution.ServiceReference.IService1)(this)).BeginGetAllDocumentRevisionsByDocumentId(documentId, callback, asyncState);
        }
        
        private object[] OnEndGetAllDocumentRevisionsByDocumentId(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<Web_Solution.ServiceReference.ServiceDocumentrevision> retVal = ((Web_Solution.ServiceReference.IService1)(this)).EndGetAllDocumentRevisionsByDocumentId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllDocumentRevisionsByDocumentIdCompleted(object state) {
            if ((this.GetAllDocumentRevisionsByDocumentIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllDocumentRevisionsByDocumentIdCompleted(this, new GetAllDocumentRevisionsByDocumentIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllDocumentRevisionsByDocumentIdAsync(int documentId) {
            this.GetAllDocumentRevisionsByDocumentIdAsync(documentId, null);
        }
        
        public void GetAllDocumentRevisionsByDocumentIdAsync(int documentId, object userState) {
            if ((this.onBeginGetAllDocumentRevisionsByDocumentIdDelegate == null)) {
                this.onBeginGetAllDocumentRevisionsByDocumentIdDelegate = new BeginOperationDelegate(this.OnBeginGetAllDocumentRevisionsByDocumentId);
            }
            if ((this.onEndGetAllDocumentRevisionsByDocumentIdDelegate == null)) {
                this.onEndGetAllDocumentRevisionsByDocumentIdDelegate = new EndOperationDelegate(this.OnEndGetAllDocumentRevisionsByDocumentId);
            }
            if ((this.onGetAllDocumentRevisionsByDocumentIdCompletedDelegate == null)) {
                this.onGetAllDocumentRevisionsByDocumentIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllDocumentRevisionsByDocumentIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllDocumentRevisionsByDocumentIdDelegate, new object[] {
                        documentId}, this.onEndGetAllDocumentRevisionsByDocumentIdDelegate, this.onGetAllDocumentRevisionsByDocumentIdCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Web_Solution.ServiceReference.IService1.BeginGetAllFilesAndFoldersByUserId(int userId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllFilesAndFoldersByUserId(userId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<string>>> Web_Solution.ServiceReference.IService1.EndGetAllFilesAndFoldersByUserId(System.IAsyncResult result) {
            return base.Channel.EndGetAllFilesAndFoldersByUserId(result);
        }
        
        private System.IAsyncResult OnBeginGetAllFilesAndFoldersByUserId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userId = ((int)(inValues[0]));
            return ((Web_Solution.ServiceReference.IService1)(this)).BeginGetAllFilesAndFoldersByUserId(userId, callback, asyncState);
        }
        
        private object[] OnEndGetAllFilesAndFoldersByUserId(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<string>>> retVal = ((Web_Solution.ServiceReference.IService1)(this)).EndGetAllFilesAndFoldersByUserId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllFilesAndFoldersByUserIdCompleted(object state) {
            if ((this.GetAllFilesAndFoldersByUserIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllFilesAndFoldersByUserIdCompleted(this, new GetAllFilesAndFoldersByUserIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllFilesAndFoldersByUserIdAsync(int userId) {
            this.GetAllFilesAndFoldersByUserIdAsync(userId, null);
        }
        
        public void GetAllFilesAndFoldersByUserIdAsync(int userId, object userState) {
            if ((this.onBeginGetAllFilesAndFoldersByUserIdDelegate == null)) {
                this.onBeginGetAllFilesAndFoldersByUserIdDelegate = new BeginOperationDelegate(this.OnBeginGetAllFilesAndFoldersByUserId);
            }
            if ((this.onEndGetAllFilesAndFoldersByUserIdDelegate == null)) {
                this.onEndGetAllFilesAndFoldersByUserIdDelegate = new EndOperationDelegate(this.OnEndGetAllFilesAndFoldersByUserId);
            }
            if ((this.onGetAllFilesAndFoldersByUserIdCompletedDelegate == null)) {
                this.onGetAllFilesAndFoldersByUserIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllFilesAndFoldersByUserIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllFilesAndFoldersByUserIdDelegate, new object[] {
                        userId}, this.onEndGetAllFilesAndFoldersByUserIdDelegate, this.onGetAllFilesAndFoldersByUserIdCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Web_Solution.ServiceReference.IService1.BeginGetLatestPureDocumentContent(int documentId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLatestPureDocumentContent(documentId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Web_Solution.ServiceReference.IService1.EndGetLatestPureDocumentContent(System.IAsyncResult result) {
            return base.Channel.EndGetLatestPureDocumentContent(result);
        }
        
        private System.IAsyncResult OnBeginGetLatestPureDocumentContent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int documentId = ((int)(inValues[0]));
            return ((Web_Solution.ServiceReference.IService1)(this)).BeginGetLatestPureDocumentContent(documentId, callback, asyncState);
        }
        
        private object[] OnEndGetLatestPureDocumentContent(System.IAsyncResult result) {
            string retVal = ((Web_Solution.ServiceReference.IService1)(this)).EndGetLatestPureDocumentContent(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLatestPureDocumentContentCompleted(object state) {
            if ((this.GetLatestPureDocumentContentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLatestPureDocumentContentCompleted(this, new GetLatestPureDocumentContentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLatestPureDocumentContentAsync(int documentId) {
            this.GetLatestPureDocumentContentAsync(documentId, null);
        }
        
        public void GetLatestPureDocumentContentAsync(int documentId, object userState) {
            if ((this.onBeginGetLatestPureDocumentContentDelegate == null)) {
                this.onBeginGetLatestPureDocumentContentDelegate = new BeginOperationDelegate(this.OnBeginGetLatestPureDocumentContent);
            }
            if ((this.onEndGetLatestPureDocumentContentDelegate == null)) {
                this.onEndGetLatestPureDocumentContentDelegate = new EndOperationDelegate(this.OnEndGetLatestPureDocumentContent);
            }
            if ((this.onGetLatestPureDocumentContentCompletedDelegate == null)) {
                this.onGetLatestPureDocumentContentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLatestPureDocumentContentCompleted);
            }
            base.InvokeAsync(this.onBeginGetLatestPureDocumentContentDelegate, new object[] {
                        documentId}, this.onEndGetLatestPureDocumentContentDelegate, this.onGetLatestPureDocumentContentCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Web_Solution.ServiceReference.IService1.BeginShareDocumentWeb(int documentId, int ownerId, int recieverId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginShareDocumentWeb(documentId, ownerId, recieverId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Web_Solution.ServiceReference.IService1.EndShareDocumentWeb(System.IAsyncResult result) {
            base.Channel.EndShareDocumentWeb(result);
        }
        
        private System.IAsyncResult OnBeginShareDocumentWeb(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int documentId = ((int)(inValues[0]));
            int ownerId = ((int)(inValues[1]));
            int recieverId = ((int)(inValues[2]));
            return ((Web_Solution.ServiceReference.IService1)(this)).BeginShareDocumentWeb(documentId, ownerId, recieverId, callback, asyncState);
        }
        
        private object[] OnEndShareDocumentWeb(System.IAsyncResult result) {
            ((Web_Solution.ServiceReference.IService1)(this)).EndShareDocumentWeb(result);
            return null;
        }
        
        private void OnShareDocumentWebCompleted(object state) {
            if ((this.ShareDocumentWebCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ShareDocumentWebCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ShareDocumentWebAsync(int documentId, int ownerId, int recieverId) {
            this.ShareDocumentWebAsync(documentId, ownerId, recieverId, null);
        }
        
        public void ShareDocumentWebAsync(int documentId, int ownerId, int recieverId, object userState) {
            if ((this.onBeginShareDocumentWebDelegate == null)) {
                this.onBeginShareDocumentWebDelegate = new BeginOperationDelegate(this.OnBeginShareDocumentWeb);
            }
            if ((this.onEndShareDocumentWebDelegate == null)) {
                this.onEndShareDocumentWebDelegate = new EndOperationDelegate(this.OnEndShareDocumentWeb);
            }
            if ((this.onShareDocumentWebCompletedDelegate == null)) {
                this.onShareDocumentWebCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnShareDocumentWebCompleted);
            }
            base.InvokeAsync(this.onBeginShareDocumentWebDelegate, new object[] {
                        documentId,
                        ownerId,
                        recieverId}, this.onEndShareDocumentWebDelegate, this.onShareDocumentWebCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Web_Solution.ServiceReference.IService1.BeginAddDocumentRevisionWeb(int documentId, int userId, string pureContent, string metadata, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddDocumentRevisionWeb(documentId, userId, pureContent, metadata, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Web_Solution.ServiceReference.IService1.EndAddDocumentRevisionWeb(System.IAsyncResult result) {
            base.Channel.EndAddDocumentRevisionWeb(result);
        }
        
        private System.IAsyncResult OnBeginAddDocumentRevisionWeb(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int documentId = ((int)(inValues[0]));
            int userId = ((int)(inValues[1]));
            string pureContent = ((string)(inValues[2]));
            string metadata = ((string)(inValues[3]));
            return ((Web_Solution.ServiceReference.IService1)(this)).BeginAddDocumentRevisionWeb(documentId, userId, pureContent, metadata, callback, asyncState);
        }
        
        private object[] OnEndAddDocumentRevisionWeb(System.IAsyncResult result) {
            ((Web_Solution.ServiceReference.IService1)(this)).EndAddDocumentRevisionWeb(result);
            return null;
        }
        
        private void OnAddDocumentRevisionWebCompleted(object state) {
            if ((this.AddDocumentRevisionWebCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddDocumentRevisionWebCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddDocumentRevisionWebAsync(int documentId, int userId, string pureContent, string metadata) {
            this.AddDocumentRevisionWebAsync(documentId, userId, pureContent, metadata, null);
        }
        
        public void AddDocumentRevisionWebAsync(int documentId, int userId, string pureContent, string metadata, object userState) {
            if ((this.onBeginAddDocumentRevisionWebDelegate == null)) {
                this.onBeginAddDocumentRevisionWebDelegate = new BeginOperationDelegate(this.OnBeginAddDocumentRevisionWeb);
            }
            if ((this.onEndAddDocumentRevisionWebDelegate == null)) {
                this.onEndAddDocumentRevisionWebDelegate = new EndOperationDelegate(this.OnEndAddDocumentRevisionWeb);
            }
            if ((this.onAddDocumentRevisionWebCompletedDelegate == null)) {
                this.onAddDocumentRevisionWebCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddDocumentRevisionWebCompleted);
            }
            base.InvokeAsync(this.onBeginAddDocumentRevisionWebDelegate, new object[] {
                        documentId,
                        userId,
                        pureContent,
                        metadata}, this.onEndAddDocumentRevisionWebDelegate, this.onAddDocumentRevisionWebCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Web_Solution.ServiceReference.IService1.BeginMoveDocumentWeb(int userId, int documentId, int newFolderId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMoveDocumentWeb(userId, documentId, newFolderId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Web_Solution.ServiceReference.IService1.EndMoveDocumentWeb(System.IAsyncResult result) {
            base.Channel.EndMoveDocumentWeb(result);
        }
        
        private System.IAsyncResult OnBeginMoveDocumentWeb(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userId = ((int)(inValues[0]));
            int documentId = ((int)(inValues[1]));
            int newFolderId = ((int)(inValues[2]));
            return ((Web_Solution.ServiceReference.IService1)(this)).BeginMoveDocumentWeb(userId, documentId, newFolderId, callback, asyncState);
        }
        
        private object[] OnEndMoveDocumentWeb(System.IAsyncResult result) {
            ((Web_Solution.ServiceReference.IService1)(this)).EndMoveDocumentWeb(result);
            return null;
        }
        
        private void OnMoveDocumentWebCompleted(object state) {
            if ((this.MoveDocumentWebCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MoveDocumentWebCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MoveDocumentWebAsync(int userId, int documentId, int newFolderId) {
            this.MoveDocumentWebAsync(userId, documentId, newFolderId, null);
        }
        
        public void MoveDocumentWebAsync(int userId, int documentId, int newFolderId, object userState) {
            if ((this.onBeginMoveDocumentWebDelegate == null)) {
                this.onBeginMoveDocumentWebDelegate = new BeginOperationDelegate(this.OnBeginMoveDocumentWeb);
            }
            if ((this.onEndMoveDocumentWebDelegate == null)) {
                this.onEndMoveDocumentWebDelegate = new EndOperationDelegate(this.OnEndMoveDocumentWeb);
            }
            if ((this.onMoveDocumentWebCompletedDelegate == null)) {
                this.onMoveDocumentWebCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMoveDocumentWebCompleted);
            }
            base.InvokeAsync(this.onBeginMoveDocumentWebDelegate, new object[] {
                        userId,
                        documentId,
                        newFolderId}, this.onEndMoveDocumentWebDelegate, this.onMoveDocumentWebCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Web_Solution.ServiceReference.IService1.BeginGetDocumentRevisionContentById(int documentRevisionId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDocumentRevisionContentById(documentRevisionId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Web_Solution.ServiceReference.IService1.EndGetDocumentRevisionContentById(System.IAsyncResult result) {
            return base.Channel.EndGetDocumentRevisionContentById(result);
        }
        
        private System.IAsyncResult OnBeginGetDocumentRevisionContentById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int documentRevisionId = ((int)(inValues[0]));
            return ((Web_Solution.ServiceReference.IService1)(this)).BeginGetDocumentRevisionContentById(documentRevisionId, callback, asyncState);
        }
        
        private object[] OnEndGetDocumentRevisionContentById(System.IAsyncResult result) {
            string retVal = ((Web_Solution.ServiceReference.IService1)(this)).EndGetDocumentRevisionContentById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDocumentRevisionContentByIdCompleted(object state) {
            if ((this.GetDocumentRevisionContentByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDocumentRevisionContentByIdCompleted(this, new GetDocumentRevisionContentByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDocumentRevisionContentByIdAsync(int documentRevisionId) {
            this.GetDocumentRevisionContentByIdAsync(documentRevisionId, null);
        }
        
        public void GetDocumentRevisionContentByIdAsync(int documentRevisionId, object userState) {
            if ((this.onBeginGetDocumentRevisionContentByIdDelegate == null)) {
                this.onBeginGetDocumentRevisionContentByIdDelegate = new BeginOperationDelegate(this.OnBeginGetDocumentRevisionContentById);
            }
            if ((this.onEndGetDocumentRevisionContentByIdDelegate == null)) {
                this.onEndGetDocumentRevisionContentByIdDelegate = new EndOperationDelegate(this.OnEndGetDocumentRevisionContentById);
            }
            if ((this.onGetDocumentRevisionContentByIdCompletedDelegate == null)) {
                this.onGetDocumentRevisionContentByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDocumentRevisionContentByIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetDocumentRevisionContentByIdDelegate, new object[] {
                        documentRevisionId}, this.onEndGetDocumentRevisionContentByIdDelegate, this.onGetDocumentRevisionContentByIdCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Web_Solution.ServiceReference.IService1 CreateChannel() {
            return new Service1ClientChannel(this);
        }
        
        private class Service1ClientChannel : ChannelBase<Web_Solution.ServiceReference.IService1>, Web_Solution.ServiceReference.IService1 {
            
            public Service1ClientChannel(System.ServiceModel.ClientBase<Web_Solution.ServiceReference.IService1> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginAddUser(string email, string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = email;
                _args[1] = password;
                System.IAsyncResult _result = base.BeginInvoke("AddUser", _args, callback, asyncState);
                return _result;
            }
            
            public int EndAddUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("AddUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddFolder(string name, int parentFolderId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = name;
                _args[1] = parentFolderId;
                System.IAsyncResult _result = base.BeginInvoke("AddFolder", _args, callback, asyncState);
                return _result;
            }
            
            public int EndAddFolder(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("AddFolder", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddDocumentWithUserDocument(string name, int userId, string filepath, string content, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = name;
                _args[1] = userId;
                _args[2] = filepath;
                _args[3] = content;
                System.IAsyncResult _result = base.BeginInvoke("AddDocumentWithUserDocument", _args, callback, asyncState);
                return _result;
            }
            
            public int EndAddDocumentWithUserDocument(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("AddDocumentWithUserDocument", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddDocumentRevision(int editorId, int documentId, string content, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = editorId;
                _args[1] = documentId;
                _args[2] = content;
                System.IAsyncResult _result = base.BeginInvoke("AddDocumentRevision", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAddDocumentRevision(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AddDocumentRevision", _args, result);
            }
            
            public System.IAsyncResult BeginSaveMergedDocument(int editorId, int documentId, string content, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = editorId;
                _args[1] = documentId;
                _args[2] = content;
                System.IAsyncResult _result = base.BeginInvoke("SaveMergedDocument", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSaveMergedDocument(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SaveMergedDocument", _args, result);
            }
            
            public System.IAsyncResult BeginGetUserByEmailAndPass(string email, string pass, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = email;
                _args[1] = pass;
                System.IAsyncResult _result = base.BeginInvoke("GetUserByEmailAndPass", _args, callback, asyncState);
                return _result;
            }
            
            public Web_Solution.ServiceReference.ServiceUser EndGetUserByEmailAndPass(System.IAsyncResult result) {
                object[] _args = new object[0];
                Web_Solution.ServiceReference.ServiceUser _result = ((Web_Solution.ServiceReference.ServiceUser)(base.EndInvoke("GetUserByEmailAndPass", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUserById(int userId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userId;
                System.IAsyncResult _result = base.BeginInvoke("GetUserById", _args, callback, asyncState);
                return _result;
            }
            
            public Web_Solution.ServiceReference.ServiceUser EndGetUserById(System.IAsyncResult result) {
                object[] _args = new object[0];
                Web_Solution.ServiceReference.ServiceUser _result = ((Web_Solution.ServiceReference.ServiceUser)(base.EndInvoke("GetUserById", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUserByEmail(string email, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = email;
                System.IAsyncResult _result = base.BeginInvoke("GetUserByEmail", _args, callback, asyncState);
                return _result;
            }
            
            public Web_Solution.ServiceReference.ServiceUser EndGetUserByEmail(System.IAsyncResult result) {
                object[] _args = new object[0];
                Web_Solution.ServiceReference.ServiceUser _result = ((Web_Solution.ServiceReference.ServiceUser)(base.EndInvoke("GetUserByEmail", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFolder(int folderId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = folderId;
                System.IAsyncResult _result = base.BeginInvoke("GetFolder", _args, callback, asyncState);
                return _result;
            }
            
            public Web_Solution.ServiceReference.ServiceFolder EndGetFolder(System.IAsyncResult result) {
                object[] _args = new object[0];
                Web_Solution.ServiceReference.ServiceFolder _result = ((Web_Solution.ServiceReference.ServiceFolder)(base.EndInvoke("GetFolder", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetRootFolderId(int userId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userId;
                System.IAsyncResult _result = base.BeginInvoke("GetRootFolderId", _args, callback, asyncState);
                return _result;
            }
            
            public int EndGetRootFolderId(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("GetRootFolderId", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDocumentById(int documentId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = documentId;
                System.IAsyncResult _result = base.BeginInvoke("GetDocumentById", _args, callback, asyncState);
                return _result;
            }
            
            public Web_Solution.ServiceReference.ServiceDocument EndGetDocumentById(System.IAsyncResult result) {
                object[] _args = new object[0];
                Web_Solution.ServiceReference.ServiceDocument _result = ((Web_Solution.ServiceReference.ServiceDocument)(base.EndInvoke("GetDocumentById", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteFolder(int folderId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = folderId;
                System.IAsyncResult _result = base.BeginInvoke("DeleteFolder", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteFolder(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteFolder", _args, result);
            }
            
            public System.IAsyncResult BeginDeleteDocumentReference(int userId, int documentId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userId;
                _args[1] = documentId;
                System.IAsyncResult _result = base.BeginInvoke("DeleteDocumentReference", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteDocumentReference(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteDocumentReference", _args, result);
            }
            
            public System.IAsyncResult BeginDeleteDocument(int documentId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = documentId;
                System.IAsyncResult _result = base.BeginInvoke("DeleteDocument", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteDocument(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteDocument", _args, result);
            }
            
            public System.IAsyncResult BeginGetAllUserDocumentsByUserId(int userId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userId;
                System.IAsyncResult _result = base.BeginInvoke("GetAllUserDocumentsByUserId", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<Web_Solution.ServiceReference.ServiceUserdocument> EndGetAllUserDocumentsByUserId(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<Web_Solution.ServiceReference.ServiceUserdocument> _result = ((System.Collections.ObjectModel.ObservableCollection<Web_Solution.ServiceReference.ServiceUserdocument>)(base.EndInvoke("GetAllUserDocumentsByUserId", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDocumentContent(string directoryPath, string filename, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = directoryPath;
                _args[1] = filename;
                System.IAsyncResult _result = base.BeginInvoke("GetDocumentContent", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetDocumentContent(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetDocumentContent", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetLatestDocumentContent(int documentId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = documentId;
                System.IAsyncResult _result = base.BeginInvoke("GetLatestDocumentContent", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetLatestDocumentContent(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetLatestDocumentContent", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSyncDocument(int editorId, int documentId, string filepath, string fileContent, string title, string pureContent, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = editorId;
                _args[1] = documentId;
                _args[2] = filepath;
                _args[3] = fileContent;
                _args[4] = title;
                _args[5] = pureContent;
                System.IAsyncResult _result = base.BeginInvoke("SyncDocument", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<string>> EndSyncDocument(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<string>> _result = ((System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<string>>)(base.EndInvoke("SyncDocument", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSyncDocumentWeb(int editorId, int documentId, string filepath, string metadata, string title, string pureContent, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = editorId;
                _args[1] = documentId;
                _args[2] = filepath;
                _args[3] = metadata;
                _args[4] = title;
                _args[5] = pureContent;
                System.IAsyncResult _result = base.BeginInvoke("SyncDocumentWeb", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<string>> EndSyncDocumentWeb(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<string>> _result = ((System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<string>>)(base.EndInvoke("SyncDocumentWeb", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDocumentId(int userId, string title, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userId;
                _args[1] = title;
                System.IAsyncResult _result = base.BeginInvoke("GetDocumentId", _args, callback, asyncState);
                return _result;
            }
            
            public int EndGetDocumentId(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("GetDocumentId", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddUserDocument(int userId, int documentId, string filepath, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = userId;
                _args[1] = documentId;
                _args[2] = filepath;
                System.IAsyncResult _result = base.BeginInvoke("AddUserDocument", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAddUserDocument(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AddUserDocument", _args, result);
            }
            
            public System.IAsyncResult BeginFolderExists(int parentFolderId, string name, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = parentFolderId;
                _args[1] = name;
                System.IAsyncResult _result = base.BeginInvoke("FolderExists", _args, callback, asyncState);
                return _result;
            }
            
            public int EndFolderExists(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("FolderExists", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddUserDocumentInRoot(int userId, int documentId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userId;
                _args[1] = documentId;
                System.IAsyncResult _result = base.BeginInvoke("AddUserDocumentInRoot", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAddUserDocumentInRoot(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AddUserDocumentInRoot", _args, result);
            }
            
            public System.IAsyncResult BeginGetAllDocumentRevisionsByDocumentId(int documentId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = documentId;
                System.IAsyncResult _result = base.BeginInvoke("GetAllDocumentRevisionsByDocumentId", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<Web_Solution.ServiceReference.ServiceDocumentrevision> EndGetAllDocumentRevisionsByDocumentId(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<Web_Solution.ServiceReference.ServiceDocumentrevision> _result = ((System.Collections.ObjectModel.ObservableCollection<Web_Solution.ServiceReference.ServiceDocumentrevision>)(base.EndInvoke("GetAllDocumentRevisionsByDocumentId", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAllFilesAndFoldersByUserId(int userId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userId;
                System.IAsyncResult _result = base.BeginInvoke("GetAllFilesAndFoldersByUserId", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<string>>> EndGetAllFilesAndFoldersByUserId(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<string>>> _result = ((System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<System.Collections.ObjectModel.ObservableCollection<string>>>)(base.EndInvoke("GetAllFilesAndFoldersByUserId", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetLatestPureDocumentContent(int documentId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = documentId;
                System.IAsyncResult _result = base.BeginInvoke("GetLatestPureDocumentContent", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetLatestPureDocumentContent(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetLatestPureDocumentContent", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginShareDocumentWeb(int documentId, int ownerId, int recieverId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = documentId;
                _args[1] = ownerId;
                _args[2] = recieverId;
                System.IAsyncResult _result = base.BeginInvoke("ShareDocumentWeb", _args, callback, asyncState);
                return _result;
            }
            
            public void EndShareDocumentWeb(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ShareDocumentWeb", _args, result);
            }
            
            public System.IAsyncResult BeginAddDocumentRevisionWeb(int documentId, int userId, string pureContent, string metadata, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = documentId;
                _args[1] = userId;
                _args[2] = pureContent;
                _args[3] = metadata;
                System.IAsyncResult _result = base.BeginInvoke("AddDocumentRevisionWeb", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAddDocumentRevisionWeb(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AddDocumentRevisionWeb", _args, result);
            }
            
            public System.IAsyncResult BeginMoveDocumentWeb(int userId, int documentId, int newFolderId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = userId;
                _args[1] = documentId;
                _args[2] = newFolderId;
                System.IAsyncResult _result = base.BeginInvoke("MoveDocumentWeb", _args, callback, asyncState);
                return _result;
            }
            
            public void EndMoveDocumentWeb(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("MoveDocumentWeb", _args, result);
            }
            
            public System.IAsyncResult BeginGetDocumentRevisionContentById(int documentRevisionId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = documentRevisionId;
                System.IAsyncResult _result = base.BeginInvoke("GetDocumentRevisionContentById", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetDocumentRevisionContentById(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetDocumentRevisionContentById", _args, result)));
                return _result;
            }
        }
    }
}
